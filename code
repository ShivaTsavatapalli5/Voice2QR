<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice and Text to QR Code Generator</title>
    <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Global Styles */
        .total-container {
            font-family: 'Roboto', sans-serif;
            background-color: #000000; /* Changed to black */
            background-size: cover;
            background-position: center;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 20px;
        }

        .image-container {
            width: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .main-image {
            max-width: 90%;
        }

        .content-container {
            width: 50%;
            padding: 30px;
            text-align: center;
            color: white; /* Text color changed to white for better visibility on black background */
        }

        h1 {
            font-size: 36px;
            font-weight: 700;
        }

        button {
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            height: 50px;
            width: 200px;
            margin: 10px;
            padding: 10px;
            border: none;
            border-radius: 10px;
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        button:hover {
            background: linear-gradient(135deg, #45a049, #3e8e41);
            transform: translateY(-3px);
        }

        button:active {
            transform: translateY(0);
        }

        input[type="text"] {
            padding: 12px;
            font-size: 16px;
            border: 2px solid #ccc;
            border-radius: 10px;
            width: 90%;
            max-width: 350px;
            background-color: #fff;
            color: #333;
            box-sizing: border-box;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        input[type="text"]:focus {
            border-color: #4CAF50;
            outline: none;
            box-shadow: 0 0 8px rgba(76, 175, 80, 0.5);
        }

        #error-message {
            margin: 0px;
            color: red;
            font-size: 14px;
            display: none;
        }

        .QR {
            margin-top: 20px;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }

        #text-preview {
            margin-top: 10px;
            font-style: italic;
            color: white;
            font-size: 16px;
        }

        #qr-code {
            border: 2px solid #ddd;
            border-radius: 12px;
            background-color: #fff;
            display: inline-block;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            margin: 10px;
            height: 125px;
            width: 125px;
        }

        .qr-label {
            margin: 0px;
            color: #fff;
        }

        #history {
            max-width: 350px;
            width: 100%;
            padding: 20px;
            text-align: left;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        #history h2 {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
        }

        hr {
            border: 1px #2c3e50 solid;
        }

        .history-item {
            padding: 12px;
            border-bottom: 1px solid #ddd;
            background: #f9fafb;
            border-radius: 8px;
            margin: 8px 0;
            font-size: 14px;
            color: #333;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #no-history-image-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .no-history-image {
            height: 100px;
        }

        .history-item:last-child {
            border-bottom: none;
        }

        .button-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .total-container {
                flex-direction: column;
                padding: 10px;
            }

            .image-container,
            .content-container {
                width: 100%;
            }

            .main-image {
                width: 100%;
            }

            input[type="text"] {
                width: 100%;
            }

            #history {
                width: 100%;
            }

            .QR {
                flex-direction: column;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 28px;
            }

            button {
                font-size: 14px;
            }

            #history {
                width: 95%;
            }

            #history h2 {
                font-size: 20px;
            }
        }
    </style>
</head>

<body>
    <div class="total-container">
        <div class="image-container">
            <img class="main-image" src="https://png.pngtree.com/thumb_back/fh260/background/20230624/pngtree-a-smartphone-scans-a-qr-code-against-a-blue-backdrop-3d-image_3674116.jpg" />
        </div>
        <div class="content-container">
            <h1>Voice and Text to QR Code Generator</h1>
            <div class="button-container">
                <div>
                    <button onclick="startRecording()">Start Recording</button>
                    <button onclick="stopRecording()">Stop Recording</button>
                </div>
                <div>
                    <button onclick="refreshPage()">Refresh for New QR</button>
                    <button onclick="clearHistory()">Clear History</button>
                </div>
            </div>
            <input type="text" id="manual-input" placeholder="Enter text manually" oninput="clearErrorMessage()" />
            <button onclick="generateQRCodeFromText()">Generate QR from Text</button>

            <p id="error-message">* Please enter text to generate QR Code. *</p>

            <div id="text-preview">Preview: <span id="preview-text"></span></div>
            <div class="QR">
                <div>
                    <p class="qr-label">QR CODE</p>
                    <canvas id="qr-code"></canvas>
                </div>
                <div id="history">
                    <h2>QR Code History</h2>
                    <hr />
                    <div id="history-list"></div>
                    <div id="no-history-image-container">
                        <img class="no-history-image" src="https://cdni.iconscout.com/illustration/premium/thumb/no-data-found-8867280-7265556.png" />
                        <p class="qr-label">No History</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let recognition;
        let recordedText = "";

        function startRecording() {
            recognition = new(window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = true;
            recognition.start();

            recognition.onresult = function(event) {
                const spokenText = event.results[event.results.length - 1][0].transcript;
                recordedText += " " + spokenText;
                document.getElementById('preview-text').textContent = recordedText.trim();
                const formattedText = formatQRData(recordedText);
                generateQRCode(formattedText);
            };

            recognition.onerror = function(event) {
                alert('Error occurred in recognition: ' + event.error);
            };
        }

        function stopRecording() {
            if (recognition) {
                recognition.stop();
                console.log('Recording stopped.');
                saveToHistory(recordedText);
            }
        }

        function generateQRCode(text) {
            const qrCodeCanvas = document.getElementById('qr-code');
            QRCode.toCanvas(qrCodeCanvas, text, function(error) {
                if (error) console.error(error);
                else console.log('QR Code generated successfully!');
            });
        }

        function generateQRCodeFromText() {
            const inputText = document.getElementById('manual-input').value.trim();
            const errorMessage = document.getElementById('error-message');

            if (!inputText) {
                errorMessage.style.display = 'block'; // Show error message
                return;
            }

            errorMessage.style.display = 'none'; // Hide error if input is valid
            const formattedText = formatQRData(inputText);
            generateQRCode(formattedText);
            saveToHistory(inputText);
        }

        function clearErrorMessage() {
            document.getElementById('error-message').style.display = 'none';
        }

        function formatQRData(inputText) {
            return inputText;
        }

        function saveToHistory(text) {
            const history = JSON.parse(localStorage.getItem('qrHistory') || '[]');
            history.push(text.trim());
            localStorage.setItem('qrHistory', JSON.stringify(history));
            displayHistory();
        }

        function displayHistory() {
            const history = JSON.parse(localStorage.getItem('qrHistory') || '[]');
            const historyList = document.getElementById('history-list');
            const noHistoryImageContainer = document.getElementById('no-history-image-container');

            if (history.length > 0) {
                historyList.innerHTML = history.map(item => `<div class='history-item'>${item}</div>`).join('');
                historyList.style.display = 'block';
                noHistoryImageContainer.style.display = 'none';
            } else {
                historyList.innerHTML = '';
                historyList.style.display = 'none';
                noHistoryImageContainer.style.display = 'flex';
            }
        }

        function refreshPage() {
            recordedText = "";
            document.getElementById('preview-text').textContent = recordedText;
            document.getElementById('manual-input').value = "";
            document.getElementById('qr-code').getContext('2d').clearRect(0, 0, 200, 200);
        }

        function clearHistory() {
            localStorage.removeItem('qrHistory');
            displayHistory();
        }

        window.onload = displayHistory;
    </script>
</body>

</html>
